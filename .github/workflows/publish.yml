name: Publish NuGet Package

on:
  push:
    branches: [ main, dev ]

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
    
    - name: Display GitVersion outputs
      run: |
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "Branch: ${{ github.ref_name }}"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release -p:Version=${{ steps.gitversion.outputs.fullSemVer }}
    
    - name: Pack
      run: dotnet pack ServiceBusEmulatorConfig.Cli/ServiceBusEmulatorConfig.Cli.csproj --no-build --configuration Release -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} --output nuget-packages
    
    - name: List Packages
      run: ls -la nuget-packages
    
    - name: Push to NuGet
      run: dotnet nuget push nuget-packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
    
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.gitversion.outputs.majorMinorPatch }}
        release_name: Release v${{ steps.gitversion.outputs.majorMinorPatch }}
        draft: false
        prerelease: false
