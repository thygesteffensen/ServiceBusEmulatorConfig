name: release-please

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: release-please-config.json
          release-type: simple
          target-branch: ${{ github.ref_name }}
          
      # Only run the following steps if releases were created
      - uses: actions/checkout@v3
        if: ${{ steps.release.outputs.releases_created }}
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        if: ${{ steps.release.outputs.releases_created }}
        with:
          dotnet-version: 9.0.x
          
      - name: Restore dependencies
        run: dotnet restore
        if: ${{ steps.release.outputs.releases_created }}
      
      # Create directory for packages
      - name: Create Packages Directory
        if: ${{ steps.release.outputs.releases_created }}
        run: mkdir -p nuget-packages
  
      # Build and pack all projects when a release is created
      - name: Display Release Output
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          echo "Release created: ${{ steps.release.outputs.releases_created }}"
          echo "Release tag: ${{ steps.release.outputs.tag_name }}"
          echo "Version: ${{ steps.release.outputs.version }}"
          echo "Major: ${{ steps.release.outputs.major }}"
          echo "Minor: ${{ steps.release.outputs.minor }}"
          echo "Patch: ${{ steps.release.outputs.patch }}"
          echo "All outputs: ${{ toJSON(steps.release.outputs) }}"
          
      # Build and pack Core project
      - name: Build and Pack Core
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          dotnet build ServiceBusEmulatorConfig.Core --configuration Release --no-restore -p:Version=${{ steps.release.outputs.version || '1.0.0' }}
          dotnet pack ServiceBusEmulatorConfig.Core --configuration Release --no-build -p:PackageVersion=${{ steps.release.outputs.version || '1.0.0' }} --output nuget-packages
          
      # Build and pack Web project
      - name: Build and Pack Web
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          dotnet build ServiceBusEmulatorConfig.Web --configuration Release --no-restore -p:Version=${{ steps.release.outputs.version || '1.0.0' }}
          dotnet pack ServiceBusEmulatorConfig.Web --configuration Release --no-build -p:PackageVersion=${{ steps.release.outputs.version || '1.0.0' }} --output nuget-packages
          
      # Build and pack CLI project
      - name: Build and Pack CLI
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          dotnet build ServiceBusEmulatorConfig.Cli --configuration Release --no-restore -p:Version=${{ steps.release.outputs.version || '1.0.0' }}
          dotnet pack ServiceBusEmulatorConfig.Cli --configuration Release --no-build -p:PackageVersion=${{ steps.release.outputs.version || '1.0.0' }} --output nuget-packages
        
      # List packages for debugging
      - name: List Packages
        if: ${{ steps.release.outputs.releases_created }}
        run: ls -la nuget-packages

      # Push packages to NuGet
      - name: Push to NuGet
        if: ${{ steps.release.outputs.releases_created }}
        run: dotnet nuget push nuget-packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
