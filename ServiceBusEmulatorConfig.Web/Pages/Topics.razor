@page "/topics"
@inject ServiceBusEmulatorConfig.Web.Services.ServiceBusConnectionService ConnectionService
@inject ISnackbar Snackbar

<PageTitle>Topics - Service Bus Explorer</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Service Bus Topics</MudText>

    @if (!ConnectionService.IsConnected)
    {
        <MudAlert Severity="Severity.Warning" Class="mb-4">
            Not connected to any Service Bus namespace. Please <MudLink Href="connection">connect first</MudLink>.
        </MudAlert>
    }
    else if (_loading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
        <MudText>Loading topics...</MudText>
    }
    else if (_error != null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            Error loading topics: @_error
        </MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadTopicsAsync">Retry</MudButton>
    }
    else if (_topics?.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="mb-4">
            No topics found in this Service Bus namespace.
        </MudAlert>
    }
    else
    {
        <MudPaper Class="pa-4 mb-4">
            <MudTable Items="@_topics" Dense="true" Hover="true" Bordered="true" Striped="true" 
                       T="ServiceBusTopic" @bind-SelectedItem="_selectedTopic" Filter="FilterFunc">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Topics</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Requires Duplicate Detection</MudTh>
                    <MudTh>Duplicate Detection Window</MudTh>
                    <MudTh>Subscription Count</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Requires Duplicate Detection">
                        @(context.Properties.RequiresDuplicateDetection ? "Yes" : "No")
                    </MudTd>
                    <MudTd DataLabel="Duplicate Detection Window">
                        @(context.Properties.DuplicateDetectionHistoryTimeWindow ?? "-")
                    </MudTd>
                    <MudTd DataLabel="Subscription Count">
                        @(context.Subscriptions?.Count ?? 0)
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Primary" OnClick="@(() => ShowTopicDetails(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudContainer>

@if (_topicDetailsDialogVisible && _selectedTopic != null)
{
    <MudDialog open="@_topicDetailsDialogVisible">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Topic" Size="Size.Small" /> @_selectedTopic.Name
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudText Typo="Typo.body1">
                <strong>Requires Duplicate Detection:</strong> @(_selectedTopic.Properties.RequiresDuplicateDetection ? "Yes" : "No")<br/>
                <strong>Default TTL:</strong> @_selectedTopic.Properties.DefaultMessageTimeToLive<br/>
                <strong>Duplicate Detection Window:</strong> @(_selectedTopic.Properties.DuplicateDetectionHistoryTimeWindow ?? "-")<br/>
            </MudText>
            
            @if (_selectedTopic.Subscriptions?.Count > 0)
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Class="mb-3">Subscriptions</MudText>
                <MudSimpleTable Hover="true" Dense="true" Bordered="true">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Requires Session</th>
                            <th>Dead Lettering on Expiration</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var subscription in _selectedTopic.Subscriptions)
                        {
                            <tr>
                                <td>@subscription.Name</td>
                                <td>@(subscription.Properties.RequiresSession ? "Yes" : "No")</td>
                                <td>@(subscription.Properties.DeadLetteringOnMessageExpiration ? "Yes" : "No")</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="CloseTopicDetailsDialog">Close</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private List<ServiceBusTopic>? _topics;
    private ServiceBusTopic? _selectedTopic;
    private bool _loading = false;
    private string? _error;
    private string _searchString = "";
    private bool _topicDetailsDialogVisible = false;

    protected override async Task OnInitializedAsync()
    {
        if (ConnectionService.IsConnected)
        {
            await LoadTopicsAsync();
        }
    }

    private async Task LoadTopicsAsync()
    {
        try
        {
            _loading = true;
            _error = null;
            _topics = await ConnectionService.GetTopicsAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private bool FilterFunc(ServiceBusTopic topic)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        
        return topic.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void ShowTopicDetails(ServiceBusTopic topic)
    {
        _selectedTopic = topic;
        _topicDetailsDialogVisible = true;
    }

    private void CloseTopicDetailsDialog()
    {
        _topicDetailsDialogVisible = false;
    }
}
